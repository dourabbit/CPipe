<!--
***********************************************************************************************
Microsoft.Xna.GameStudio.NestedContent.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

This file defines the steps in the standard build process specific for handling nested
XNA Game Content projects. For example, it contains the step that builds the nested content
and copies the built content to the output directory. The remainder of the build process is
defined in Microsoft.Common.targets, which should be imported before importing this file.

Copyright (C) Microsoft Corporation. All rights reserved.
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Have our package build run after the user builds the project. -->
  <PropertyGroup>
    <CoreBuildDependsOn>
      BuildNestedProjects;
      $(CoreBuildDependsOn)
    </CoreBuildDependsOn>

    <CoreCleanDependsOn>
      CleanNestedProjects;
      $(CoreCleanDependsOn)
    </CoreCleanDependsOn>
  </PropertyGroup>

  <!-- These help detect whether a project has customized the build rules in a potentially unsafe way. -->
  <PropertyGroup>
    <LoadTimeSensitiveTargets>
      $(LoadTimeSensitiveTargets);
      _SplitNestedProjectsByFileExistence;
      SetParentOutputDir;
      BuildNestedProjects;
      CleanNestedProjects;
      GetCopyToOutputDirectoryNestedProjectItems;
      _CopyOutOfDateNestedContentItemsToOutputDirectory;
      _CopyOutOfDateNestedContentItemsToOutputDirectoryAlways
    </LoadTimeSensitiveTargets>
    <LoadTimeSensitiveProperties>
      $(LoadTimeSensitiveProperties);
      BuildNestedProjectsDependsOn;
      CleanNestedProjectsDependsOn;
      GetCopyToOutputDirectoryNestedProjectItemsDependsOn;
      GetCopyToOutputDirectoryItemsDependsOn
    </LoadTimeSensitiveProperties>
  </PropertyGroup>

  <!-- Specifies the platform for which content will be built, in case it is
       not the same as the code platform. -->
  <PropertyGroup>
    <XnaContentPlatform Condition="'$(XnaContentPlatform)' == ''" >$(XnaPlatform)</XnaContentPlatform>
  </PropertyGroup>

  <!--
    ============================================================
                                        _SplitNestedProjectsByFileExistence

    Split referenced projects into two lists: those that exist on 
    disk and those that don't.
    ============================================================
    -->
  <Target
    Name="_SplitNestedProjectsByFileExistence"
    Condition="'@(NestedContentProject)'!=''">

    <!-- Break the project list into two lists: those that exist on disk and those that don't. -->
    <CreateItem Include="@(NestedContentProject)" Condition="Exists('%(Identity)')">
      <Output TaskParameter="Include" ItemName="_MSBuildNestedProjectExistent"/>
    </CreateItem>

    <CreateItem Include="@(NestedContentProject)" Condition="!Exists('%(Identity)')">
      <Output TaskParameter="Include" ItemName="_MSBuildNestedProjectReferenceNonexistent"/>
    </CreateItem>
  </Target>

  <Target Name="SetParentOutputDir">
    <CreateProperty Value="$(TargetDir)">
      <Output TaskParameter="Value" PropertyName="ParentOutputDir"/>
    </CreateProperty>
    <CreateProperty Value="$(MSBuildProjectDirectory)\$(IntermediateOutputPath)">
      <Output TaskParameter="Value" PropertyName="ParentIntermediateDir"/>
    </CreateProperty>
  </Target>
  
  <!--
    ============================================================
                                        BuildNestedProjects

    Builds nested content projects to match the current platform
    and configuration. Projects can skip this target by setting
    SkipNestedContentBuild to true.
    ============================================================
    -->
  <PropertyGroup>
    <BuildNestedProjectsDependsOn>
      PrepareForBuild;
      _SplitNestedProjectsByFileExistence;
      SetParentOutputDir
    </BuildNestedProjectsDependsOn>
  </PropertyGroup>

  <Target
    Name="BuildNestedProjects"
    DependsOnTargets="$(BuildNestedProjectsDependsOn)"
    Condition="'@(NestedContentProject)'!='' and '$(SkipNestedContentBuild)'!='true'" >

    <!--
        Always build nested content projects, because the IDE and/or solution does not build them.
        
        The $(NestedProjectBuildTargets) will normally be blank so that the project's
        default target is used during a P2P reference. However if a custom build process requires
        that the referenced project has a different target to build it can be specified.
        -->

    <MSBuild
      Projects="@(_MSBuildNestedProjectExistent)"
      BuildInParallel="true"
      Targets="$(NestedProjectBuildTargets)"
      Properties="Configuration=$(Configuration); Platform=$(Platform); XnaPlatform=$(XnaContentPlatform); ParentOutputDir=$(ParentOutputDir); ParentIntermediateDir=$(ParentIntermediateDir); ParentProjectDir=$(ProjectDir); XnaCompressContent=$(XnaCompressContent)"
      Condition="'@(_MSBuildNestedProjectExistent)'!=''">

      <Output TaskParameter="TargetOutputs" ItemName="_BuiltNestedContentFiles"/>

    </MSBuild>

  </Target>

  <!--
    ============================================================
                                        CleanNestedProjects

    Cleans nested content projects matching the current platform
    and configuration.
    ============================================================
    -->
  <PropertyGroup>
    <CleanNestedProjectsDependsOn>
      _SplitNestedProjectsByFileExistence;
      SetParentOutputDir
    </CleanNestedProjectsDependsOn>
  </PropertyGroup>
  
  <Target
    Name="CleanNestedProjects"
    DependsOnTargets="$(CleanNestedProjectsDependsOn)"
    Condition="'@(NestedContentProject)'!=''">

    <MSBuild
      Projects="@(_MSBuildNestedProjectExistent)"
      Targets="Clean"
      Properties="Configuration=$(Configuration); Platform=$(Platform); XnaPlatform=$(XnaContentPlatform); ParentOutputDir=$(ParentOutputDir); ParentIntermediateDir=$(ParentIntermediateDir)"
      Condition="'@(_MSBuildNestedProjectExistent)'!=''" />

  </Target>

  <!--
    ============================================================
                                        GetCopyToOutputDirectoryNestedProjectItems

    Creates an item group of all the most-recently-built outputs
    from the nested projects. This target is meant to be chained
    by GetCopyToOutputDirectoryItems, so that content can be added
    to the list of files to copy from projects referencing this
    one.
    
    Also hooking into MSBuild's preexisting GetCopyToOutputDirectoryItemDependsOn
    (which now exists as a property in MSBuild3.5, where it didn't in MSBuild 2.0)
    ============================================================
    -->

  <PropertyGroup>
    <GetCopyToOutputDirectoryItemsDependsOn>
      $(GetCopyToOutputDirectoryItemsDependsOn);
      GetCopyToOutputDirectoryNestedProjectItems
    </GetCopyToOutputDirectoryItemsDependsOn>
  </PropertyGroup>
  
  <PropertyGroup>
    <GetCopyToOutputDirectoryNestedProjectItemsDependsOn>
      _SplitNestedProjectsByFileExistence;
      SetParentOutputDir
    </GetCopyToOutputDirectoryNestedProjectItemsDependsOn>
  </PropertyGroup>

  <Target
    Name="GetCopyToOutputDirectoryNestedProjectItems"
    DependsOnTargets="$(GetCopyToOutputDirectoryNestedProjectItemsDependsOn)">

    <!-- Get items from child projects first. -->
    <MSBuild
      Projects="@(_MSBuildNestedProjectExistent)"
      Targets="GetCopyToOutputDirectoryItems"
      Properties="Configuration=$(Configuration); Platform=$(Platform); XnaPlatform=$(XnaContentPlatform); ParentOutputDir=$(ParentOutputDir); ParentIntermediateDir=$(ParentIntermediateDir)"
      Condition="'@(_MSBuildNestedProjectExistent)'!=''">

      <Output TaskParameter="TargetOutputs" ItemName="_AllNestedContentProjectItemsWithTargetPath"/>

    </MSBuild>

    <!-- Target outputs must be full paths because they will be consumed by a different project. -->
    <CreateItem
      Include="@(_AllNestedContentProjectItemsWithTargetPath->'%(FullPath)')"
      Condition="'%(_AllNestedContentProjectItemsWithTargetPath.CopyToOutputDirectory)'=='Always' or '%(_AllNestedContentProjectItemsWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"
                >
      <Output TaskParameter="Include" ItemName="AllItemsFullPathWithTargetPath"/>
      <Output TaskParameter="Include" ItemName="_NestedContentItemsToCopyToOutputDirectoryAlways"
              Condition="'%(_AllNestedContentProjectItemsWithTargetPath.CopyToOutputDirectory)'=='Always'"/>
      <Output TaskParameter="Include" ItemName="_NestedContentItemsToCopyToOutputDirectory"
              Condition="'%(_AllNestedContentProjectItemsWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
    </CreateItem>

  </Target>

  <!--
  ============================================================
                                      _CopySourceItemsToOutputDirectory
  ============================================================
  -->
  <Target
      Name="_CopySourceItemsToOutputDirectory"
      DependsOnTargets="
            GetCopyToOutputDirectoryItems;
            _CopyOutOfDateSourceItemsToOutputDirectory;
            _CopyOutOfDateSourceItemsToOutputDirectoryAlways;
            GetCopyToOutputDirectoryNestedProjectItems;
            _CopyOutOfDateNestedContentItemsToOutputDirectory;
            _CopyOutOfDateNestedContentItemsToOutputDirectoryAlways;"/>

  


  
  <!--
  ============================================================
                                      _CopyOutOfDateNestedContentItemsToOutputDirectory

  Copy files that have the CopyToOutputDirectory attribute set to 'PreserveNewest'.
  ============================================================
  -->
  <Target
      Name="_CopyOutOfDateNestedContentItemsToOutputDirectory"
      Condition=" '@(_NestedContentItemsToCopyToOutputDirectory)' != '' "
      Inputs="@(_NestedContentItemsToCopyToOutputDirectory)"
      Outputs="@(_NestedContentItemsToCopyToOutputDirectory->'$(OutDir)%(TargetPath)')">

    <!--
    Not using SkipUnchangedFiles="true" because the application may want to change
    one of these files and not have an incremental build replace it.
    -->
    <Copy
        SourceFiles = "@(_NestedContentItemsToCopyToOutputDirectory)"
        DestinationFiles = "@(_NestedContentItemsToCopyToOutputDirectory->'$(OutDir)%(TargetPath)')">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>

  </Target>

  <!--
  ============================================================
                                      _CopyOutOfDateNestedContentItemsToOutputDirectoryAlways

  Copy files that have the CopyToOutputDirectory attribute set to 'Always'.
  ============================================================
  -->
  <Target
      Name="_CopyOutOfDateNestedContentItemsToOutputDirectoryAlways"
      Condition=" '@(_NestedContentItemsToCopyToOutputDirectoryAlways)' != '' ">

    <!--
    Not using SkipUnchangedFiles="true" because the application may want to change
    one of these files and not have an incremental build replace it.
    -->
    <Copy
        SourceFiles = "@(_NestedContentItemsToCopyToOutputDirectoryAlways)"
        DestinationFiles = "@(_NestedContentItemsToCopyToOutputDirectoryAlways->'$(OutDir)%(TargetPath)')">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>

  </Target>

  <!--
    ============================================================
                                        GetReferenceAssemblyPaths

    Redefines the standard GetReferenceAssemblyPaths to make the original
    target conditional on the XnaPlatform property. The original target is
    defined below as "RealGetReferenceAssemblyPaths".
    
    The additional paths are specific to the desktop framework, and we do not
    want those appended to our reference paths in non-Windows projects.
    ============================================================
    -->
  <Target
      Name="GetReferenceAssemblyPaths"
      DependsOnTargets="RealGetReferenceAssemblyPaths">
  </Target>

  <!--
    ============================================================
                                        RealGetReferenceAssemblyPaths

    Get the paths for the Reference Assemblies for the known versions of the
    .NET Framework.

    These paths are used by the build process in order to resolve the correct
    assemblies from the various directories, and to support multi-targeting
    ============================================================
    -->
  <Target
      Name="RealGetReferenceAssemblyPaths"
      DependsOnTargets="$(GetReferenceAssemblyPathsDependsOn)"
      Condition=" '$(XnaPlatform)' == 'Windows' ">

    <!-- Ordering of target framework directories doesn't matter except for assemblies
             that aren't in a redist list; for those, make sure we order 3.5, 3.0, 2.0 -->

    <PropertyGroup Condition=" '$(TargetFrameworkVersion)' == 'v3.0' or '$(TargetFrameworkVersion)' == 'v3.5' ">
      <TargetFrameworkDirectory>$(WinFXAssemblyDirectory);$(TargetFrameworkDirectory)</TargetFrameworkDirectory>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(TargetFrameworkVersion)' == 'v3.5' ">
      <TargetFrameworkDirectory>$(Registry:HKEY_LOCAL_MACHINE\Software\Microsoft\.NETFramework\AssemblyFolders\v3.5@All Assemblies In);$(TargetFrameworkDirectory)</TargetFrameworkDirectory>
    </PropertyGroup>

  </Target>



  <!--
    ============================================================
                                        XNAReadContentCacheFile

    Reads all cache files that we output to the intermediate path during the 
    content build process.  Cache files contain the Content files target path 
    information, which we use to populate the manifest ItemGroup 
    _DeploymentManifestFiles
    ============================================================
    -->

  <PropertyGroup>
    <GenerateManifestsDependsOn>
      _CopySourceItemsToOutputDirectory;
      XNAReadContentCacheFile;
      $(GenerateManifestsDependsOn)
    </GenerateManifestsDependsOn>
  </PropertyGroup>

  <Target Name="XNAReadContentCacheFile">
    <CreateItem Include="$(MSBuildProjectDirectory)\$(IntermediateOutputPath)cachefile-%(NestedContentProject.Project)-targetpath.txt">
      <Output ItemName="XNAAllCacheFiles" TaskParameter="Include"/>
    </CreateItem>
    
    <ReadLinesFromFile File="%(XNAAllCacheFiles.Identity)" 
                       Condition="'@(XNAAllCacheFiles)' != ''">
      <Output TaskParameter="Lines" ItemName="_FromBuiltContentTargetPath"/>
    </ReadLinesFromFile>

    <CreateItem Include="$(OutputPath)%(_FromBuiltContentTargetPath.Identity)" 
                AdditionalMetadata="TargetPath=%(_FromBuiltContentTargetPath.Identity);IsDataFile=false"
                Condition="'@(_FromBuiltContentTargetPath)' != ''">
      <Output ItemName="_DeploymentManifestFiles" TaskParameter="Include" />
    </CreateItem>
  </Target>
</Project>
