
//////////////////////////////////////////////////////////////////////////////////////////
// Parameters
//////////////////////////////////////////////////////////////////////////////////////////

float4x4 textureMatrix;

//////////////////////////////////////////////////////////////////////////////////////////
// Texture Sampler
//////////////////////////////////////////////////////////////////////////////////////////

texture hdrBuffer;
sampler hdrFrameBuffer = sampler_state 
{
    texture = <hdrBuffer>;
    AddressU  = CLAMP;        
    AddressV  = CLAMP;
    AddressW  = CLAMP;
	MIPFILTER = LINEAR;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
};

//////////////////////////////////////////////////////////////////////////////////////////
// Structures  input and out put
//////////////////////////////////////////////////////////////////////////////////////////

struct VS_INPUT 
{
   float4 Position			: POSITION0;  
};

struct VS_OUTPUT 
{
   float4 Position			: POSITION0;
   float2 screenTexCoord	: TEXCOORD0;
};

//////////////////////////////////////////////////////////////////////////////////////////
// vertex shader
//////////////////////////////////////////////////////////////////////////////////////////

VS_OUTPUT vs_main( VS_INPUT Input )
{
   VS_OUTPUT Output;

   float4 screenPos			= float4(sign(Input.Position.xy), 1, 1); 
   Output.screenTexCoord	= mul(screenPos, textureMatrix);
   Output.Position			= screenPos;
   return( Output );
}

//////////////////////////////////////////////////////////////////////////////////////////
// pixel shader
//////////////////////////////////////////////////////////////////////////////////////////

float4 ps_main(float2 screenTexCoord : TEXCOORD0) : COLOR0
{
				
		float4 color	= tex2D(hdrFrameBuffer, screenTexCoord);
		return half4(color);
		
}
//////////////////////////////////////////////////////////////////////////////////////////
// technique shader
//////////////////////////////////////////////////////////////////////////////////////////

technique standard
{
    pass p0 
    {		
		VertexShader			= compile vs_3_0 vs_main();
		PixelShader				= compile ps_3_0 ps_main();
		AlphaBlendEnable		= false;
    }
}