<!--
***********************************************************************************************
Microsoft.Xna.GameStudio.Common.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

This file defines the steps in the standard build process specific for C# .NET projects.
For example, it contains the step that actually calls the C# compiler.  The remainder
of the build process is defined in Microsoft.Common.targets, which is imported by 
this file.

Copyright (C) Microsoft Corporation. All rights reserved.
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- These tasks are specific to the build process defined in this file, and are not considered general-purpose build tasks. -->
  <UsingTask TaskName="XnaClubPackageTask" AssemblyFile="$(MSBuildExtensionsPath)\Microsoft\XNA Game Studio\v3.1\Microsoft.Xna.Framework.Tools.Packaging.Tasks.dll"/>

  <!-- These help detect whether a project has customized the build rules in a potentially unsafe way. -->
  <PropertyGroup>
    <LoadTimeSensitiveTargets>
      $(LoadTimeSensitiveTargets);
      XnaPackageBuild;
      EmbedXnaFrameworkRuntimeProfile;
    </LoadTimeSensitiveTargets>
  </PropertyGroup>

  <!--
    If the appropriate targets file exists, it will be imported and will override
    this target definition. If it does not exist, then this target will produce an
    error for the user if the user attempts to build.
  -->
  <PropertyGroup>
    <PrepareForBuildDependsOn Condition="'$(_XnaPlatformSpecificTargetsPath)' == ''">XnaProjectFileNeedsUpgrade;$(PrepareForBuildDependsOn)</PrepareForBuildDependsOn>
  </PropertyGroup>
  <Target Name="XnaProjectFileNeedsUpgrade">
    <Error Text="The project file '$(ProjectFileName)' appears to have been created with XNA Game Studio 3.0 CTP. For instructions on how to upgrade this project to work with the current version, copy and paste this link into your browser: http://go.microsoft.com/fwlink/?LinkId=121512." />
  </Target>

  <!-- Have our package build run after the user builds the project. -->
  <PropertyGroup>
    <BuildDependsOn>
      $(BuildDependsOn); 
      XNAPackageBuild;
    </BuildDependsOn>
  </PropertyGroup>

  <!--
        We will not look in the TargetFrameworkDirectory for Xbox 360, nor in the GAC.
    -->
  <PropertyGroup>
    <!--
        The SearchPaths property is set to find assemblies in the following order:

            (1) Files from current project - indicated by {CandidateAssemblyFiles}
            (2) $(ReferencePath) - the reference path property, which comes from the .USER file.
            (3) The hintpath from the referenced item itself, indicated by {HintPathFromItem}.
            (4) The directory of MSBuild's "target" runtime from GetFrameworkPath.
                The "target" runtime folder is the folder of the runtime that MSBuild is a part of.
            (5) Registered assembly folders, indicated by {Registry:*,*,*}
            (6) Legacy registered assembly folders, indicated by {AssemblyFolders}
            (7) Look in the application's output folder (like bin\debug)
            (8) Resolve to the GAC.
            (9) Treat the reference's Include as if it were a real file name.
        -->
    <AssemblySearchPaths Condition=" '$(XnaPlatform)' != 'Windows' ">
      {CandidateAssemblyFiles};
      $(ReferencePath);
      {HintPathFromItem};
      ;
      {Registry:$(FrameworkRegistryBase),$(XnaFrameworkVersion),$(AssemblyFoldersSuffix)};
      ;
      ;
      {RawFileName};
      $(OutputPath)
    </AssemblySearchPaths>
  </PropertyGroup>
  
  <!--
    In VS 2008, a new feature was introduced to speed up the "F5" scenario when
    no changes have occurred. It does this by skipping the build entirely if the
    IDE beleives there are no changes. This is fast, but unreliable because it
    does not check all the same files as msbuild does. In XNA game projects, for
    example, the IDE does not check if any content needs to be rebuilt. As a
    result, F5 is way faster, but you may start debugging a project that is out
    of date. To disable the new feature, we set DisableFastUpToDateCheck to true.
  -->
  <PropertyGroup>
    <DisableFastUpToDateCheck>true</DisableFastUpToDateCheck>
  </PropertyGroup>

  <!--  Build the Package if the Create XNA Club Package menu was selected.  -->
  <Target Name="XnaPackageBuild">

    <XnaClubPackageTask XnaFrameworkVersion="$(XnaFrameworkVersion)" XnaPlatform="$(XnaPlatform)" ProjectPath="$(ProjectDir)" OutputPath="$(OutputPath)" AssemblyName="$(AssemblyName)" >
      <Output PropertyName="XnaPackageVersion" TaskParameter="XnaFrameworkVersion" />
      <Output PropertyName="XnaPackagePlatform" TaskParameter="XnaPlatform" />
      <Output PropertyName="XnaPackageToolPath" TaskParameter="ToolPath" />
      <Output PropertyName="DoPackageBuild" TaskParameter="ShouldPackage" />
      <Output PropertyName="XnaPackageThumbnail" TaskParameter="Thumbnail" />
      <Output PropertyName="XnaPackageOutputPath" TaskParameter="OutputPath" />
    </XnaClubPackageTask>

  </Target>

  <PropertyGroup>
    <!-- Default the runtime profile to the XNA Framework version being targeted. -->
    <XnaFrameworkRuntimeProfile Condition="'$(XnaFrameworkRuntimeProfile)'==''">$(XnaPlatform).$(XnaFrameworkVersion)</XnaFrameworkRuntimeProfile>

    <!-- Define the intermediate file into which we write the runtime profile token. -->
    <XnaFrameworkRuntimeProfileFile Condition="'$(XnaFrameworkRuntimeProfileFile)'==''">Microsoft.Xna.Framework.RuntimeProfile.txt</XnaFrameworkRuntimeProfileFile>

    <!-- Make sure our target runs before the EmbeddedResource items are processed. -->
    <PrepareResourceNamesDependsOn>
      EmbedXnaFrameworkRuntimeProfile;
      $(PrepareResourceNamesDependsOn)
    </PrepareResourceNamesDependsOn>
  </PropertyGroup>

  <ItemGroup>
    <ToBeEmbeddedResource Include="$(IntermediateOutputPath)$(XnaFrameworkRuntimeProfileFile)">
      <LogicalName>Microsoft.Xna.Framework.RuntimeProfile</LogicalName>
    </ToBeEmbeddedResource>
  </ItemGroup>

  <Target Name="EmbedXnaFrameworkRuntimeProfile"
          Condition="'$(XnaFrameworkRuntimeProfile)' != '' and '$(BuildingProject)'=='true'"
          Inputs="$(MSBuildProjectFile)"
          Outputs="$(IntermediateOutputPath)$(XnaFrameworkRuntimeProfileFile)" >

    <CreateItem Include="$(XnaFrameworkRuntimeProfile)">
      <Output TaskParameter="Include" ItemName="_XnaFrameworkRuntimeProfile"/>
    </CreateItem>

    <WriteLinesToFile
      File="$(IntermediateOutputPath)$(XnaFrameworkRuntimeProfileFile)"
      Lines="@(_XnaFrameworkRuntimeProfile)"
      Overwrite="true"/>

    <CreateItem Include="$(IntermediateOutputPath)$(XnaFrameworkRuntimeProfileFile)">
      <Output TaskParameter="Include" ItemName="FileWrites"/>
    </CreateItem>

    <CreateItem Include="@(ToBeEmbeddedResource)">
      <Output TaskParameter="Include" ItemName="EmbeddedResource"/>
    </CreateItem>

  </Target>



  <!--
    ============================================================
                                        GetCopyToOutputDirectoryItems

    Get all project items that may need to be transferred to the output directory.
    This includes baggage items from transitively referenced projects. It would appear
    that this target computes full transitive closure of content items for all referenced
    projects; however that is not the case. It only collects the content items from its
    immediate children and not children of children. The reason this happens is that
    the NonVCProjectReferences list that is consumed by _SplitProjectReferencesByFileExistence
    is only populated in the current project and is empty in the children. The empty list
    causes _MSBuildProjectReferenceExistent to be empty and terminates the recursion.
    
    This target is copied from Microsoft.Common.targets.  We copy it so that we can add 
    the writing of the cachefile step at the very end.
    ============================================================
    
    
    -->

  <Target
      Name="GetCopyToOutputDirectoryItems"
      Outputs="@(AllItemsFullPathWithTargetPath)"
      DependsOnTargets="$(GetCopyToOutputDirectoryItemsDependsOn)">

    <!-- Get items from child projects first. -->
    <MSBuild
        Projects="@(_MSBuildProjectReferenceExistent)"
        Targets="GetCopyToOutputDirectoryItems"
        BuildInParallel="$(BuildInParallel)"
        Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform)"
        Condition="'@(_MSBuildProjectReferenceExistent)' != '' and '$(_GetChildProjectCopyToOutputDirectoryItems)' == 'true' and '%(_MSBuildProjectReferenceExistent.Private)' != 'false'">

      <Output TaskParameter="TargetOutputs" ItemName="_AllChildProjectItemsWithTargetPath"/>

    </MSBuild>

    <!-- Target outputs must be full paths because they will be consumed by a different project. -->
    <ItemGroup>
      <AllItemsFullPathWithTargetPath            Include="@(_AllChildProjectItemsWithTargetPath->'%(FullPath)')" Condition="'%(_AllChildProjectItemsWithTargetPath.CopyToOutputDirectory)'=='Always' or '%(_AllChildProjectItemsWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
      <_SourceItemsToCopyToOutputDirectoryAlways Include="@(_AllChildProjectItemsWithTargetPath->'%(FullPath)')" Condition="'%(_AllChildProjectItemsWithTargetPath.CopyToOutputDirectory)'=='Always'"/>
      <_SourceItemsToCopyToOutputDirectory       Include="@(_AllChildProjectItemsWithTargetPath->'%(FullPath)')" Condition="'%(_AllChildProjectItemsWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
    </ItemGroup>

    <!-- Get items from this project last so that they will be copied last. -->
    <ItemGroup>
      <AllItemsFullPathWithTargetPath            Include="@(ContentWithTargetPath->'%(FullPath)')" Condition="'%(ContentWithTargetPath.CopyToOutputDirectory)'=='Always' or '%(ContentWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
      <_SourceItemsToCopyToOutputDirectoryAlways Include="@(ContentWithTargetPath->'%(FullPath)')" Condition="'%(ContentWithTargetPath.CopyToOutputDirectory)'=='Always'"/>
      <_SourceItemsToCopyToOutputDirectory       Include="@(ContentWithTargetPath->'%(FullPath)')" Condition="'%(ContentWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
    </ItemGroup>

    <ItemGroup>
      <AllItemsFullPathWithTargetPath            Include="@(EmbeddedResource->'%(FullPath)')" Condition="'%(EmbeddedResource.CopyToOutputDirectory)'=='Always' or '%(EmbeddedResource.CopyToOutputDirectory)'=='PreserveNewest'"/>
      <_SourceItemsToCopyToOutputDirectoryAlways Include="@(EmbeddedResource->'%(FullPath)')" Condition="'%(EmbeddedResource.CopyToOutputDirectory)'=='Always'"/>
      <_SourceItemsToCopyToOutputDirectory       Include="@(EmbeddedResource->'%(FullPath)')" Condition="'%(EmbeddedResource.CopyToOutputDirectory)'=='PreserveNewest'"/>
    </ItemGroup>

    <ItemGroup>
      <_CompileItemsToCopy Include="@(Compile->'%(FullPath)')" Condition="'%(Compile.CopyToOutputDirectory)'=='Always' or '%(Compile.CopyToOutputDirectory)'=='PreserveNewest'"/>
    </ItemGroup>

    <AssignTargetPath Files="@(_CompileItemsToCopy)" RootFolder="$(MSBuildProjectDirectory)">
      <Output TaskParameter="AssignedFiles" ItemName="_CompileItemsToCopyWithTargetPath" />
    </AssignTargetPath>

    <ItemGroup>
      <AllItemsFullPathWithTargetPath            Include="@(_CompileItemsToCopyWithTargetPath)"/>
      <_SourceItemsToCopyToOutputDirectoryAlways Include="@(_CompileItemsToCopyWithTargetPath)" Condition="'%(_CompileItemsToCopyWithTargetPath.CopyToOutputDirectory)'=='Always'"/>
      <_SourceItemsToCopyToOutputDirectory       Include="@(_CompileItemsToCopyWithTargetPath)" Condition="'%(_CompileItemsToCopyWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
    </ItemGroup>

    <ItemGroup>
      <AllItemsFullPathWithTargetPath            Include="@(_NoneWithTargetPath->'%(FullPath)')" Condition="'%(_NoneWithTargetPath.CopyToOutputDirectory)'=='Always' or '%(_NoneWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
      <_SourceItemsToCopyToOutputDirectoryAlways Include="@(_NoneWithTargetPath->'%(FullPath)')" Condition="'%(_NoneWithTargetPath.CopyToOutputDirectory)'=='Always'"/>
      <_SourceItemsToCopyToOutputDirectory       Include="@(_NoneWithTargetPath->'%(FullPath)')" Condition="'%(_NoneWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
    </ItemGroup>

    <WriteLinesToFile File="$(MSBuildProjectFullPath).$(Configuration).cachefile"
                      Lines="@(AllItemsFullPathWithTargetPath->'%(TargetPath)')"
                      Overwrite="true"/>
  </Target>


    <!--
    ============================================================
                                        XNAReadDependenciesCacheFile

    Reads all cache files that we output from referenced XNA projects.  
    Cache files contain the Content files target path information, which 
    we use to populate the manifest ItemGroup _DeploymentManifestFiles
    ============================================================
    -->

    <PropertyGroup>
      <GenerateManifestsDependsOn>
        _SplitProjectReferencesByFileExistence;
        _CopySourceItemsToOutputDirectory;
        XNAReadDependenciesCacheFile;
        $(GenerateManifestsDependsOn)
      </GenerateManifestsDependsOn>
    </PropertyGroup>

    <Target 
      Name="XNAReadDependenciesCacheFile">

      <CreateItem Include="%(_MSBuildProjectReferenceExistent.Identity).$(Configuration).cachefile">
        <Output ItemName="XNADependenciesCacheFiles" TaskParameter="Include"/>
      </CreateItem>

      <ReadLinesFromFile File="%(XNADependenciesCacheFiles.Identity)"
                         Condition="'@(XNADependenciesCacheFiles)' != ''">
        <Output TaskParameter="Lines" ItemName="_FromBuiltDependencyContentTargetPath"/>
      </ReadLinesFromFile>

      <CreateItem Include="$(OutputPath)%(_FromBuiltDependencyContentTargetPath.Identity)"
                  AdditionalMetadata="TargetPath=%(_FromBuiltDependencyContentTargetPath.Identity);IsDataFile=false"
                  Condition="'@(_FromBuiltDependencyContentTargetPath)' != ''">
        <Output ItemName="_DeploymentManifestFiles" TaskParameter="Include" />
      </CreateItem>
    </Target>
</Project>
