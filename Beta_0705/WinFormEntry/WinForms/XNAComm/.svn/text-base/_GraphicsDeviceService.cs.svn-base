#region File Description
//-----------------------------------------------------------------------------
// ModelViewerControl.cs
//
// Microsoft XNA Community Game Platform
// Copyright (C) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#endregion

#region Using Statements
using System;
using System.Diagnostics;
using System.Windows.Forms;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
#endregion

namespace WinFormsContentLoading
{
    /// <summary>
    /// Example control inherits from GraphicsDeviceControl, and displays
    /// a spinning 3D model. The main form class is responsible for loading
    /// the model: this control just displays it.
    /// </summary>
    public class ModelViewerControl : GraphicsDeviceControl
    {

        //SceneEntry scene;
        /// <summary>
        /// Gets or sets the current model.
        /// </summary>
        public Model Model
        {
            get { return model; }

            set
            {
                model = value;

                if (model != null)
                {
                    MeasureModel();
                }
            }
        }

        Model model;

        //public Effect Compositing;

        //Blooming Component
        //public Bloom bloom;



        // Cache information about the model size and position.
        Matrix[] boneTransforms;
        Vector3 modelCenter;
        //float modelRadius;

        cCamera cam;
        // Timer controls the rotation speed.
        Stopwatch timer;
        //Vector3 eyePosition;






        /// <summary>
        /// Initializes the control.
        /// </summary>
        protected override void Initialize()
        {
            // Start the animation timer.
            timer = Stopwatch.StartNew();
            cam = new cCamera();
            // bloom = new Bloom(this.Device, this.cont);
            /*
            eyePosition = modelCenter;

            eyePosition.Z += modelRadius * 2;
            eyePosition.Y += modelRadius;

            cam._position = eyePosition / 1.5f;*/


            //bloom.Initialize();




            // Hook the idle event to constantly redraw our animation.
            Application.Idle += delegate { Invalidate(); };

            //scene = new SceneEntry();

        }


        /// <summary>
        /// Draws the control.
        /// </summary>
        protected override void Draw()
        {
            // Clear to the default control background color.
            Color backColor = new Color(BackColor.R, BackColor.G, BackColor.B);

            Device.Clear(backColor);

            if (model != null)
            {
                // Compute camera matrices.
                float rotation = (float)timer.Elapsed.TotalSeconds;


                float aspectRatio = Device.Viewport.AspectRatio;

                float nearClip = 1;//modelRadius / 100;
                float farClip = 1000;//modelRadius * 100;



                Matrix world = cam.myWorld;
                Matrix view = cam.myView;
                Matrix projection = cam.myProjection = Matrix.CreatePerspectiveFieldOfView(1, aspectRatio,
                                                                    nearClip, farClip);
                cam.Update();



                /*
                   Device.render.AlphaBlendEnable = false;
                   Device.RenderState.DepthBufferEnable = true;
                   Device.RenderState.DepthBufferWriteEnable = true;
              */


                // Draw the model.
                foreach (ModelMesh mesh in model.Meshes)
                {

                    foreach (ModelMeshPart mp in mesh.MeshParts)
                    {

                        if (mp.Effect is BasicEffect)
                        {
                            BasicEffect effect = (BasicEffect)mp.Effect;
                            effect.World = boneTransforms[mesh.ParentBone.Index] * world;
                            effect.View = view;
                            effect.Projection = projection;

                            effect.EnableDefaultLighting();
                            effect.PreferPerPixelLighting = true;
                            effect.SpecularPower = 16;

                        }
                        else
                        {
                            Effect myEff = mp.Effect;
                            if (myEff.CurrentTechnique.Name == "trans")
                            {
                                myEff.Parameters["WorldViewProjection"].SetValue(world * view * projection);

                            }
                            else
                            {

                                myEff.Parameters["WorldITXf"].SetValue(Matrix.Transpose(Matrix.Invert(boneTransforms[mesh.ParentBone.Index] * world)));
                                myEff.Parameters["WvpXf"].SetValue(Matrix.Multiply(boneTransforms[mesh.ParentBone.Index] * world, Matrix.Multiply(view, projection)));
                                myEff.Parameters["WorldXf"].SetValue(boneTransforms[mesh.ParentBone.Index] * world);
                                myEff.Parameters["ViewIXf"].SetValue(Matrix.Invert(view));
                                myEff.Parameters["gLamp0DirPos"].SetValue(new Vector4(18.3f, 73f, 332f, 1f));

                            }
                        }

                    }


                    mesh.Draw();


                }

                /* 
                   Device.RenderState.AlphaBlendEnable = false;
                   Device.RenderState.DepthBufferEnable = false;
                   Device.RenderState.DepthBufferWriteEnable = false;*/
                //bloom.Draw(new GameTime());

            }

        }


        /// <summary>
        /// Whenever a new model is selected, we examine it to see how big
        /// it is and where it is centered. This lets us automatically zoom
        /// the display, so we can correctly handle models of any scale.
        /// </summary>
        void MeasureModel()
        {
            // Look up the absolute bone transforms for this model.
            boneTransforms = new Matrix[model.Bones.Count];

            model.CopyAbsoluteBoneTransformsTo(boneTransforms);

            // Compute an (approximate) model center position by
            // averaging the center of each mesh bounding sphere.
            modelCenter = Vector3.Zero;

            foreach (ModelMesh mesh in model.Meshes)
            {
                BoundingSphere meshBounds = mesh.BoundingSphere;
                Matrix transform = boneTransforms[mesh.ParentBone.Index];
                Vector3 meshCenter = Vector3.Transform(meshBounds.Center, transform);

                modelCenter += meshCenter;
            }

            modelCenter /= model.Meshes.Count;

            /*
            // Now we know the center point, we can compute the model radius
            // by examining the radius of each mesh bounding sphere.
            modelRadius = 0;

            foreach (ModelMesh mesh in model.Meshes)
            {
                BoundingSphere meshBounds = mesh.BoundingSphere;
                Matrix transform = boneTransforms[mesh.ParentBone.Index];
                Vector3 meshCenter = Vector3.Transform(meshBounds.Center, transform);

                float transformScale = transform.Forward.Length();
                
                float meshRadius = (meshCenter - modelCenter).Length() +
                                   (meshBounds.Radius * transformScale);

                modelRadius = Math.Max(modelRadius,  meshRadius);
            }*/
        }


    }
}
