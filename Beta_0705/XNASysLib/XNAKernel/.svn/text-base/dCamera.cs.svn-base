using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Graphics;
using System;


namespace XNASysLib.XNAKernel
{

    public class dCamera :DrawableComponent,ICamera,ISelectable
    {
        Vector3 _position;
        Vector3 _targetPos;
        float _targetDis;
        Quaternion _rotation;
        
        Matrix _world;
        Matrix _view;
        Matrix _projection;
        Viewport _viewport;
        OnSelected _selectionHandler;
        
        Matrix ICamera.WorldMatrix
        {
            get
            {
                return this._world;
            }
            set
            {
                this._world = value;
            }
        }
        Matrix ICamera.ViewMatrix
        {
            get
            {
                return this._view;
            }
            set
            {
                this._view = value;
            }
        }

        Matrix ICamera.ProjectionMatrix
        {
            get
            {
                return this._projection;
            }
            set
            {
                this._projection = value;
            }
        }

        Viewport ICamera.Viewport
        {
            get
            {
                return this._viewport;
            }
            set 
            {
                this._viewport = value;
            }
        }


        float tranlationSpeed = .01f;
        float turnSpeed = .001f;


        public dCamera(IGame game):base(game)
      
        {

            _position = new Vector3(0, 0, 0);
            _targetPos = new Vector3(0, 0, 0);
            _rotation = new Quaternion(0, 0, 0, 1);
            

        }
        public override void Initialize()
        {
            float aspectRatio = _game.GraphicsDevice.Viewport.AspectRatio;

            _projection = Matrix.CreatePerspectiveFieldOfView
                (MathHelper.PiOver4, aspectRatio, 0.1f, 10000f);

            _viewport =_game.GraphicsDevice.Viewport;

            base.Initialize();


        }

        public override void Update(GameTime gameTime)
        {
            _targetDis = Math.Abs(Vector3.Distance
                (this._position, this._targetPos));


            _world = Matrix.Identity;

            _view = Matrix.Invert(Matrix.CreateFromQuaternion(_rotation) *
                                   Matrix.CreateTranslation(_position));


            /*
            if (!Keyboard.GetState().IsKeyDown(Keys.LeftAlt))
                return;*/

            if (Keyboard.GetState().IsKeyDown(Keys.W))
                this.Translate(Vector3.Forward * tranlationSpeed);
            if (Keyboard.GetState().IsKeyDown(Keys.S))
                this.Translate(Vector3.Backward * tranlationSpeed);
            if (Keyboard.GetState().IsKeyDown(Keys.A))
                this.Translate(Vector3.Left * tranlationSpeed);
            if (Keyboard.GetState().IsKeyDown(Keys.D))
                this.Translate(Vector3.Right * tranlationSpeed);

            if (Keyboard.GetState().IsKeyDown(Keys.Up))
                this.Rotate(Vector3.Left, turnSpeed);
            if (Keyboard.GetState().IsKeyDown(Keys.Down))
                this.Rotate(Vector3.Right, turnSpeed);
            if (Keyboard.GetState().IsKeyDown(Keys.Left))
                this.Rotate(Vector3.Up, turnSpeed);
            if (Keyboard.GetState().IsKeyDown(Keys.Right))
                this.Rotate(Vector3.Down, turnSpeed);


            base.Update(gameTime);

        }
        public void Rotate(Vector3 axis, float angle)
        {
            axis = Vector3.Transform(axis, Matrix.CreateFromQuaternion(_rotation));
            _rotation = Quaternion.Normalize(
                                                Quaternion.CreateFromAxisAngle(axis, angle)
                                                *
                                                _rotation
                                                );

            this._position = this._targetPos;
            Translate(new Vector3(0,0,this._targetDis));


        }
        public void Translate(Vector3 distance)
        {
            _position += Vector3.Transform(distance,
                Matrix.CreateFromQuaternion(_rotation));
            /*this._targetPos += Vector3.Transform(distance, 
                Matrix.CreateFromQuaternion(_rotation));*/
        }
    }
}