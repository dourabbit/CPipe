using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using XNAPhysicsLib;
using Microsoft.Xna.Framework.Input;
using XNASysLib.XNATools;

namespace XNASysLib.XNAKernel
{
    public class DataReactor : aC_Reactor,IDrawableComponent
    {
        #region Fields
        protected IGame _game;
        protected
            SysDataList<ISysData>
                                        _sysDataList;
        protected bool _isIntialized;
        protected Point _mousePos;
        protected ICamera _cam;
        public ICamera Camera
        { set { _cam = value; } }
        /// <summary>
        /// panal region
        /// </summary>
        protected Rectangle? _activeRegion;
        /// <summary>
        /// Mouse Selection
        /// </summary>
        protected Rectangle? _mouseSelection;
        public Rectangle? MouseSelection
        { get { return this._mouseSelection; } }
        protected Vector3[] _mouseSelectionWorldPos;
        protected Vector3 _selectionCentre;

        private List<ISelectable> _HotReg;
        
        #endregion
        protected Matrix _world;
        DebugDraw _debugDraw;
        MouseData _mouseData;
        public MouseData MouseData
        { get { return _mouseData; } }
        Point? _start;

        #region Properties

        public Rectangle? ActiveRegion
        { set { _activeRegion = value; } }

        public SysDataList<ISysData> DataList
        {
            get { return _sysDataList; }
        }
        public Point? MousePos
        {
            get
            {
                if (_activeRegion.HasValue)
                    return new Point(
                    _mousePos.X - _activeRegion.Value.X,
                    _mousePos.Y - _activeRegion.Value.Y);
                else
                    return null;
            }
        }

        #endregion
        public Matrix World
        { get { return _world; }
            set { _world = value; }
        }
        public static DataReactor
            GetDataReactor()
        {
            return (DataReactor)
                _reactorPool.Find(
                    delegate(aC_Reactor match)
                    {
                        return match is DataReactor ? true : false;
                    });
        }
        #region Constructor
        public DataReactor(IGame game):base()
        {
            _game = game;
            this._proceedType = new int[3] { -1, -2, -3 };
            this._sysDataList =
                new SysDataList<ISysData>();
            this._HotReg = new List<ISelectable>();
            _isIntialized = false;
            _world = Matrix.Identity;
        }
        #endregion

        #region Override aC_Reactor: ProceedEvent() Dispatch()
        
        /*void Debug(int index)
        {
            MouseData data = (MouseData)
            this._sysDataList.GetData(-1, 0);

            Console.Write(data.ISysDataTime.ToString() +
                "---" + "Data0: " +
                data.IsLeftBtnDown.ToString() + "  ");


            data = (MouseData)
            this._sysDataList.GetData(-1, 1);

            Console.Write("Data1: " +
                data.IsLeftBtnDown.ToString() + "\n");
        }
        */
        public override void Dispatch
            (ISysData gameData)
        {
            if (gameData.ISysDataType >= 0)
                return;

            base.Dispatch(gameData);
        }
        public override void ProceedEvent
            (ISysData gameData)
        {

            this._sysDataList.Add(gameData);

            if (gameData is MouseData)
            {
                _mouseData=(MouseData)gameData;
                this._mousePos = _mouseData.MousePos;

                if (_mouseData.SelectionRect.Width == 0 ||
                                    _mouseData.SelectionRect.Height == 0)
                    this._mouseSelection = null;
                else
                {
                    this._mouseSelection = _mouseData.SelectionRect;
                    this._selectionCentre = _mouseData.SelectionCentre;
                    this._mouseSelectionWorldPos = _mouseData.SelectionWorldPos;
                }
                
            }
            if (gameData is CameraData)
                this._cam = ((CameraData)gameData).Camera;
            

            base.ProceedEvent(gameData);
        }
        #endregion
        public virtual void Initialize()
        { 
            
            this._debugDraw = new 
                DebugDraw(_game.GraphicsDevice);

            if (this._cam == null)
                _cam = (ICamera)_game.Services.GetService(typeof(ICamera));
            _isIntialized = true;

        }
        #region Update
        public virtual void
            Update(GameTime gameTime)
        {
            if (!_isIntialized)
                this.Initialize();
            #region Old
            /*if (this._mouseSelection.HasValue&&
                (_mouseSelection.Value.Width != 1&&
                _mouseSelection.Value.Height != 1)
                )
            {
                this._selection.Clear();
                Matrix viewInv = Matrix.Invert(this.Camera.ViewMatrix);
                //Matrix a=  this._cam.ViewMatrix;
                Vector3 camPos = new Vector3(viewInv.M41, viewInv.M42, viewInv.M43);
                Vector3 rectCentre =this._selectionCentre;

                //TempCode----------------------Not accuracy
                float width= Vector3.Distance(this._mouseSelectionWorldPos[0],
                                        _mouseSelectionWorldPos[1]);
                float height=Vector3.Distance(this._mouseSelectionWorldPos[1],
                                        _mouseSelectionWorldPos[2]);
                BoundingFrustum curFrustum = CreateFrustum
                    (camPos, rectCentre, width, height);

                foreach (IUpdatableComponent ucomp in _game.Components)
                    if (ucomp is ISelectable)
                    {
                        ISelectable scomp = ((ISelectable)ucomp);
                        if (scomp.GetType() == this._cam.GetType())
                            continue;

                        if(calculateIntersection
                            (curFrustum, scomp.Data))
                            this._selection.Add(scomp);

                    }

                selectionChanged();
            }
            else if (_mouseSelection.HasValue&&
                _mouseSelection.Value.Width == 1 &&
                _mouseSelection.Value.Height == 1)
            {

                this._selection.Clear();
                foreach (IUpdatableComponent ucomp in _game.Components)
                    if (ucomp is ISelectable)
                    {
                        ISelectable scomp = ((ISelectable)ucomp);
                        if (scomp.GetType() == this._cam.GetType())
                            continue;
                        Vector2 mousePos = new Vector2(this.MousePos.Value.X,
                                this.MousePos.Value.Y);

                        if (calculateIntersection
                            (CalculateCursorRay(mousePos), scomp.Data))
                            this._selection.Add(scomp);


                    }

                selectionChanged();
            }*/
            
            #endregion

            if (!this.MousePos.HasValue)
                return;

            if (this._mouseData.IsLeftBtnDown&&_start==null)
                _start = MousePos.Value;
            if (!this._mouseData.IsClicking)
                _start = null;



            //GetTool

            IUpdatableComponent tool=
            _game.Components.Find(
                delegate(IUpdatableComponent curU)
                {
                    return
                        curU is aCTool ?
                        true : false;
                });
            bool toolmode = false;
            IUpdatableComponent target = null;

            if (tool != null)
            {
                target = ((ITool)tool).ToolTarget;
                toolmode = true;
            }
            bool test = false;
           
            //Selection
            foreach (IUpdatableComponent ucomp in _game.Components)
            {

                if (target != null && ucomp == target)
                {
                    continue;
                }
                if (ucomp is ISelectable)
                {
                    ISelectable scomp = ((ISelectable)ucomp);
                    if (scomp.GetType() == this._cam.GetType())
                        continue;
                    Vector2 mousePos = new Vector2(this.MousePos.Value.X,
                            this.MousePos.Value.Y);

                    if (CalculateIntersection
                        (CalculateCursorRay(mousePos), scomp.Data))
                    {
                        test |= true;

                        if (!_HotReg.Contains(scomp))
                            _HotReg.Add(scomp);
                        if (_mouseSelection.HasValue &&
                               _mouseSelection.Value.Width == 1 &&
                               _mouseSelection.Value.Height == 1)
                        {
                            SelectFunction.Select(scomp);
                        }


                        if (scomp is IDraggable)
                        {
                            if (_mouseData.IsDragging&&Keyboard.GetState().IsKeyUp(Keys.LeftAlt))
                            {
                                IDraggable drcomp = (IDraggable)scomp;
                                try{
                                    drcomp.DragHandler.Invoke(_start.Value,MousePos.Value);
                                }
                                catch(Exception e){
                                    throw new ArgumentNullException();
                                }
                            }
                        }
                    }
                    else
                    {
                        if (_HotReg.Contains(scomp))
                            _HotReg.Remove(scomp);
                        /*
                        if (SelectFunction.Selection.Contains(scomp))
                            SelectFunction.DeSelect(scomp);*/

                        if (_mouseSelection.HasValue &&
                            _mouseSelection.Value.Width == 1 &&
                            _mouseSelection.Value.Height == 1&&!_mouseData.IsDragging
                            &&_mouseData.IsLeftBtnUp==false)
                        {
                            //SelectFunction.DeSelect(scomp);
                        }

                    }

                }


            }

            if (!test && MouseData.IsClicking && Keyboard.GetState().IsKeyUp(Keys.LeftAlt) && !toolmode)
            {
                SelectFunction.Selection.Clear();
            
            }


            this._mouseSelection = null;
        }
        #endregion

        #region HandlerFuntions
        /*void selectionChanged()
        {
            foreach (IUpdatableComponent ucomp in _game.Components)
                if (ucomp is ISelectable)
                {
                    ISelectable scomp = ((ISelectable)ucomp);
                    if (scomp.Data.SelectionHandler != null)
                        scomp.Data.SelectionHandler.Invoke(false);
                }

            foreach (ISelectable sel in this._selection)

                if (sel.Data.SelectionHandler != null)
                    sel.Data.SelectionHandler.Invoke(true);
        
        }*/

        public bool CalculateIntersection
                (BoundingFrustum frustum,
                 SelectableCompData data)
        {
            bool isIntersected=false;

            foreach (BoundingSphere sphere in data.BoundingSpheres)
                isIntersected |= frustum.Intersects(sphere);

      
            return isIntersected;
                
        }
        public bool CalculateIntersection
                (Ray ray,
                 SelectableCompData data)
        {
            bool isIntersected = false;
            if (data.BoundingSpheres == null)
                return false;
            foreach (BoundingSphere sphere in data.BoundingSpheres)
                isIntersected |= sphere.Intersects(ray).HasValue;


            return isIntersected;

        }
        BoundingFrustum CreateFrustum(Vector3 camPos, 
            Vector3 centrePos,
            float width, float height)
        {
            float depth = Vector3.Distance(camPos, centrePos);

            Matrix proj = Matrix.CreatePerspective(width,
                                height,
                                depth,1000f);

            Matrix view=Matrix.CreateLookAt(camPos,
                    centrePos,Vector3.Up);
            return new BoundingFrustum(Matrix.Multiply(view, proj));
        }
        
        // CalculateCursorRay Calculates a world space ray starting at the camera's
        // "eye" and pointing in the direction of the cursor. Viewport.Unproject is used
        // to accomplish this. see the accompanying documentation for more explanation
        // of the math behind this function.
        public Ray? CalculateCursorRay(ICamera cam)
        {
            if (!this.MousePos.HasValue)
                return null;

            Vector2 position = new Vector2(this.MousePos.Value.X,
                this.MousePos.Value.Y);

            Matrix projectionMatrix=cam.ProjectionMatrix;
            Matrix viewMatrix=cam.ViewMatrix;

            // create 2 positions in screenspace using the cursor position. 0 is as
            // close as possible to the camera, 1 is as far away as possible.
            Vector3 nearSource = new Vector3(position, 0f);
            Vector3 farSource = new Vector3(position, 1f);

            // use Viewport.Unproject to tell what those two screen space positions
            // would be in world space. we'll need the projection matrix and view
            // matrix, which we have saved as member variables. We also need a world
            // matrix, which can just be identity.
            Vector3 nearPoint = _game.GraphicsDevice.Viewport.Unproject(nearSource,
                projectionMatrix, viewMatrix, Matrix.Identity);

            Vector3 farPoint = _game.GraphicsDevice.Viewport.Unproject(farSource,
                projectionMatrix, viewMatrix, Matrix.Identity);

            // find the direction vector that goes from the nearPoint to the farPoint
            // and normalize it....
            Vector3 direction = farPoint - nearPoint;
            direction.Normalize();

            // and then create a new ray using nearPoint as the source.
            return new Ray(nearPoint, direction);
        }
        public Ray CalculateCursorRay(Vector2 position)
        {
            Matrix projectionMatrix = _cam.ProjectionMatrix;
            Matrix viewMatrix = _cam.ViewMatrix;

            // create 2 positions in screenspace using the cursor position. 0 is as
            // close as possible to the camera, 1 is as far away as possible.
            Vector3 nearSource = new Vector3(position, 0f);
            Vector3 farSource = new Vector3(position, 1f);

            // use Viewport.Unproject to tell what those two screen space positions
            // would be in world space. we'll need the projection matrix and view
            // matrix, which we have saved as member variables. We also need a world
            // matrix, which can just be identity.
            Vector3 nearPoint = _game.GraphicsDevice.Viewport.Unproject(nearSource,
                projectionMatrix, viewMatrix, Matrix.Identity);

            Vector3 farPoint = _game.GraphicsDevice.Viewport.Unproject(farSource,
                projectionMatrix, viewMatrix, Matrix.Identity);

            // find the direction vector that goes from the nearPoint to the farPoint
            // and normalize it....
            Vector3 direction = farPoint - nearPoint;
            direction.Normalize();

            // and then create a new ray using nearPoint as the source.
            return new Ray(nearPoint, direction);
        }
        #endregion


        public virtual void Draw(GameTime gameTime)
        {
            _debugDraw.Begin(Matrix.Multiply(this._world,_cam.ViewMatrix),
                _cam.ProjectionMatrix);
            _debugDraw.DrawWireGrid(Vector3.UnitX * 5, Vector3.UnitZ * 5,
                       new Vector3(-2.5f, 0, -2.5f), 20, 20, Color.Green);

            foreach (ISelectable scomp in _HotReg)
                _debugDraw.DrawWireSphere(scomp.Data.BoundingSpheres[0],
                    Color.Red);

            _debugDraw.End();
        }
    }

  
}
